//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventsGSUDataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GsuEventsDBEntities : DbContext
    {
        public GsuEventsDBEntities()
            : base("name=GsuEventsDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EventDetail> EventDetails { get; set; }
        public virtual DbSet<EventsTable> EventsTables { get; set; }
        public virtual DbSet<PaymentHistoryTable> PaymentHistoryTables { get; set; }
        public virtual DbSet<PaymentTable> PaymentTables { get; set; }
        public virtual DbSet<RoleTable> RoleTables { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TicketsTable> TicketsTables { get; set; }
        public virtual DbSet<UserTable> UserTables { get; set; }
    
        public virtual int sp_AddEvent(Nullable<int> eventID, string eventLocation, string eventType, string eventImage, Nullable<int> eventTitle, Nullable<int> userID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var eventLocationParameter = eventLocation != null ?
                new ObjectParameter("EventLocation", eventLocation) :
                new ObjectParameter("EventLocation", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventImageParameter = eventImage != null ?
                new ObjectParameter("EventImage", eventImage) :
                new ObjectParameter("EventImage", typeof(string));
    
            var eventTitleParameter = eventTitle.HasValue ?
                new ObjectParameter("EventTitle", eventTitle) :
                new ObjectParameter("EventTitle", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddEvent", eventIDParameter, eventLocationParameter, eventTypeParameter, eventImageParameter, eventTitleParameter, userIDParameter, createdDateParameter, modifiedDateParameter);
        }
    
        public virtual int sp_AddPayment(Nullable<int> paymentID, string firstName, string lastName, string userEmail, Nullable<int> userPhoneNumber, Nullable<int> userCardNumber, Nullable<System.DateTime> userCardExpiration, Nullable<int> userCardCVV, string userAddress, Nullable<int> userZipCode, string userState, Nullable<int> userPaymentPaid, string userTypeCode, Nullable<int> ticketID, Nullable<int> userID, Nullable<int> eventID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPhoneNumberParameter = userPhoneNumber.HasValue ?
                new ObjectParameter("UserPhoneNumber", userPhoneNumber) :
                new ObjectParameter("UserPhoneNumber", typeof(int));
    
            var userCardNumberParameter = userCardNumber.HasValue ?
                new ObjectParameter("UserCardNumber", userCardNumber) :
                new ObjectParameter("UserCardNumber", typeof(int));
    
            var userCardExpirationParameter = userCardExpiration.HasValue ?
                new ObjectParameter("UserCardExpiration", userCardExpiration) :
                new ObjectParameter("UserCardExpiration", typeof(System.DateTime));
    
            var userCardCVVParameter = userCardCVV.HasValue ?
                new ObjectParameter("UserCardCVV", userCardCVV) :
                new ObjectParameter("UserCardCVV", typeof(int));
    
            var userAddressParameter = userAddress != null ?
                new ObjectParameter("UserAddress", userAddress) :
                new ObjectParameter("UserAddress", typeof(string));
    
            var userZipCodeParameter = userZipCode.HasValue ?
                new ObjectParameter("UserZipCode", userZipCode) :
                new ObjectParameter("UserZipCode", typeof(int));
    
            var userStateParameter = userState != null ?
                new ObjectParameter("UserState", userState) :
                new ObjectParameter("UserState", typeof(string));
    
            var userPaymentPaidParameter = userPaymentPaid.HasValue ?
                new ObjectParameter("UserPaymentPaid", userPaymentPaid) :
                new ObjectParameter("UserPaymentPaid", typeof(int));
    
            var userTypeCodeParameter = userTypeCode != null ?
                new ObjectParameter("UserTypeCode", userTypeCode) :
                new ObjectParameter("UserTypeCode", typeof(string));
    
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddPayment", paymentIDParameter, firstNameParameter, lastNameParameter, userEmailParameter, userPhoneNumberParameter, userCardNumberParameter, userCardExpirationParameter, userCardCVVParameter, userAddressParameter, userZipCodeParameter, userStateParameter, userPaymentPaidParameter, userTypeCodeParameter, ticketIDParameter, userIDParameter, eventIDParameter, createdDateParameter, modifiedDateParameter);
        }
    
        public virtual int sp_AddRegUser(Nullable<int> userID, string userPassword, string userName, string userEmail, Nullable<int> userPhoneNumber, string isActive, Nullable<int> userTypeID, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPhoneNumberParameter = userPhoneNumber.HasValue ?
                new ObjectParameter("UserPhoneNumber", userPhoneNumber) :
                new ObjectParameter("UserPhoneNumber", typeof(int));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(string));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddRegUser", userIDParameter, userPasswordParameter, userNameParameter, userEmailParameter, userPhoneNumberParameter, isActiveParameter, userTypeIDParameter, createdDateParameter, modifiedDateParameter);
        }
    
        public virtual int sp_AddTicket(Nullable<int> ticketID, Nullable<int> ticketQuantity, Nullable<int> ticketPrice, Nullable<int> eventID, Nullable<int> ticketImage, Nullable<System.DateTime> createdDate, Nullable<System.DateTime> modifiedDate)
        {
            var ticketIDParameter = ticketID.HasValue ?
                new ObjectParameter("TicketID", ticketID) :
                new ObjectParameter("TicketID", typeof(int));
    
            var ticketQuantityParameter = ticketQuantity.HasValue ?
                new ObjectParameter("TicketQuantity", ticketQuantity) :
                new ObjectParameter("TicketQuantity", typeof(int));
    
            var ticketPriceParameter = ticketPrice.HasValue ?
                new ObjectParameter("TicketPrice", ticketPrice) :
                new ObjectParameter("TicketPrice", typeof(int));
    
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var ticketImageParameter = ticketImage.HasValue ?
                new ObjectParameter("TicketImage", ticketImage) :
                new ObjectParameter("TicketImage", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddTicket", ticketIDParameter, ticketQuantityParameter, ticketPriceParameter, eventIDParameter, ticketImageParameter, createdDateParameter, modifiedDateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
